package cu.uci.cesim.hce_back.estadisticas.model.entity.auto;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import org.hibernate.validator.constraints.Length;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

// Generated Apr 18, 2012 10:46:48 AM by Hibernate Tools 3.4.0.CR1


/**
 * Funcionalidad generated by hbm2java
 */
@Entity
@Table(name = "funcionalidad", schema = "seguridad", uniqueConstraints = @UniqueConstraint(columnNames = "nombre"))
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class Funcionalidad_estadisticas implements java.io.Serializable {

    private long id;
    private Integer version;
    private Entidad_estadisticas entidad;
    private String label;
    private String url;
    private Boolean eliminado;
    private Long cid;
    private int orden;
    private String imagen;
    private boolean esModulo;
    private Long idFuncionalidadPadre;
    private Integer labelSize;
    private String nombre;
    private Boolean moduloFisico;
    private boolean contenedorIconos;
    private String codebase;
    private String descripcion;
    private String grupo;
    private boolean necesitaActivacion;
    private boolean activo;
    private Set<OrdenTransferencia_estadisticas> ordenTransferencias = new HashSet<OrdenTransferencia_estadisticas>(
            0);
    private Set<BolsaSangre_estadisticas> bolsaSangres = new HashSet<BolsaSangre_estadisticas>(
            0);
    private Set<SolicitudIntervencion_estadisticas> solicitudIntervencions = new HashSet<SolicitudIntervencion_estadisticas>(
            0);
    private Set<CertificadoDefuncion_estadisticas> certificadoDefuncions = new HashSet<CertificadoDefuncion_estadisticas>(
            0);
    private Set<SolicitudAnalisisLab_estadisticas> solicitudAnalisisLabs = new HashSet<SolicitudAnalisisLab_estadisticas>(
            0);
    private Set<SolicitudTransfusion_estadisticas> solicitudTransfusions = new HashSet<SolicitudTransfusion_estadisticas>(
            0);
    private Set<Admision_estadisticas> admisions = new HashSet<Admision_estadisticas>(
            0);
    private Set<Transferencia_estadisticas> transferencias = new HashSet<Transferencia_estadisticas>(
            0);
    private Set<Laboratorio_estadisticas> laboratorios = new HashSet<Laboratorio_estadisticas>(
            0);
    private Set<TratamientoTerapeutico_estadisticas> tratamientoTerapeuticosForIdEntidad = new HashSet<TratamientoTerapeutico_estadisticas>(
            0);
    private Set<SolicitudInterconsulta_estadisticas> solicitudInterconsultas = new HashSet<SolicitudInterconsulta_estadisticas>(
            0);
    private Set<InfecFicha_estadisticas> infecFichas = new HashSet<InfecFicha_estadisticas>(
            0);
    private Set<TratamientoTerapeutico_estadisticas> tratamientoTerapeuticosForIdFuncionalidad = new HashSet<TratamientoTerapeutico_estadisticas>(
            0);

    public Funcionalidad_estadisticas() {
    }

    public Funcionalidad_estadisticas(long id, int orden, String imagen,
                                      boolean esModulo, boolean contenedorIconos,
                                      boolean necesitaActivacion, boolean activo) {
        this.id = id;
        this.orden = orden;
        this.imagen = imagen;
        this.esModulo = esModulo;
        this.contenedorIconos = contenedorIconos;
        this.necesitaActivacion = necesitaActivacion;
        this.activo = activo;
    }

    public Funcionalidad_estadisticas(
            long id,
            Entidad_estadisticas entidad,
            String label,
            String url,
            Boolean eliminado,
            Long cid,
            int orden,
            String imagen,
            boolean esModulo,
            Long idFuncionalidadPadre,
            Integer labelSize,
            String nombre,
            Boolean moduloFisico,
            boolean contenedorIconos,
            String codebase,
            String descripcion,
            String grupo,
            boolean necesitaActivacion,
            boolean activo,
            Set<OrdenTransferencia_estadisticas> ordenTransferencias,
            Set<BolsaSangre_estadisticas> bolsaSangres,
            Set<SolicitudIntervencion_estadisticas> solicitudIntervencions,
            Set<CertificadoDefuncion_estadisticas> certificadoDefuncions,
            Set<SolicitudAnalisisLab_estadisticas> solicitudAnalisisLabs,
            Set<SolicitudTransfusion_estadisticas> solicitudTransfusions,
            Set<Admision_estadisticas> admisions,
            Set<Transferencia_estadisticas> transferencias,
            Set<Laboratorio_estadisticas> laboratorios,
            Set<TratamientoTerapeutico_estadisticas> tratamientoTerapeuticosForIdEntidad,
            Set<SolicitudInterconsulta_estadisticas> solicitudInterconsultas,
            Set<InfecFicha_estadisticas> infecFichas,
            Set<TratamientoTerapeutico_estadisticas> tratamientoTerapeuticosForIdFuncionalidad) {
        this.id = id;
        this.entidad = entidad;
        this.label = label;
        this.url = url;
        this.eliminado = eliminado;
        this.cid = cid;
        this.orden = orden;
        this.imagen = imagen;
        this.esModulo = esModulo;
        this.idFuncionalidadPadre = idFuncionalidadPadre;
        this.labelSize = labelSize;
        this.nombre = nombre;
        this.moduloFisico = moduloFisico;
        this.contenedorIconos = contenedorIconos;
        this.codebase = codebase;
        this.descripcion = descripcion;
        this.grupo = grupo;
        this.necesitaActivacion = necesitaActivacion;
        this.activo = activo;
        this.ordenTransferencias = ordenTransferencias;
        this.bolsaSangres = bolsaSangres;
        this.solicitudIntervencions = solicitudIntervencions;
        this.certificadoDefuncions = certificadoDefuncions;
        this.solicitudAnalisisLabs = solicitudAnalisisLabs;
        this.solicitudTransfusions = solicitudTransfusions;
        this.admisions = admisions;
        this.transferencias = transferencias;
        this.laboratorios = laboratorios;
        this.tratamientoTerapeuticosForIdEntidad = tratamientoTerapeuticosForIdEntidad;
        this.solicitudInterconsultas = solicitudInterconsultas;
        this.infecFichas = infecFichas;
        this.tratamientoTerapeuticosForIdFuncionalidad = tratamientoTerapeuticosForIdFuncionalidad;
    }

    @Id
    @Column(name = "id", unique = true, nullable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @Version
    @Column(name = "version")
    public Integer getVersion() {
        return this.version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_entidad")
    public Entidad_estadisticas getEntidad() {
        return this.entidad;
    }

    public void setEntidad(Entidad_estadisticas entidad) {
        this.entidad = entidad;
    }

    @Column(name = "label", length = 150)
    @Length(max = 150)
    public String getLabel() {
        return this.label;
    }

    public void setLabel(String label) {
        if (label != null)
            label = label.trim();
        this.label = label;
    }

    @Column(name = "url")
    public String getUrl() {
        return this.url;
    }

    public void setUrl(String url) {
        if (url != null)
            url = url.trim();
        this.url = url;
    }

    @Column(name = "eliminado")
    public Boolean getEliminado() {
        return this.eliminado;
    }

    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }

    @Column(name = "cid")
    public Long getCid() {
        return this.cid;
    }

    public void setCid(Long cid) {
        this.cid = cid;
    }

    @Column(name = "orden", nullable = false)

    public int getOrden() {
        return this.orden;
    }

    public void setOrden(int orden) {
        this.orden = orden;
    }

    @Column(name = "imagen", nullable = false)

    public String getImagen() {
        return this.imagen;
    }

    public void setImagen(String imagen) {
        if (imagen != null)
            imagen = imagen.trim();
        this.imagen = imagen;
    }

    @Column(name = "es_modulo", nullable = false)

    public boolean isEsModulo() {
        return this.esModulo;
    }

    public void setEsModulo(boolean esModulo) {
        this.esModulo = esModulo;
    }

    @Column(name = "id_funcionalidad_padre")
    public Long getIdFuncionalidadPadre() {
        return this.idFuncionalidadPadre;
    }

    public void setIdFuncionalidadPadre(Long idFuncionalidadPadre) {
        this.idFuncionalidadPadre = idFuncionalidadPadre;
    }

    @Column(name = "label_size")
    public Integer getLabelSize() {
        return this.labelSize;
    }

    public void setLabelSize(Integer labelSize) {
        this.labelSize = labelSize;
    }

    @Column(name = "nombre", unique = true)
    public String getNombre() {
        return this.nombre;
    }

    public void setNombre(String nombre) {
        if (nombre != null)
            nombre = nombre.trim();
        this.nombre = nombre;
    }

    @Column(name = "modulo_fisico")
    public Boolean getModuloFisico() {
        return this.moduloFisico;
    }

    public void setModuloFisico(Boolean moduloFisico) {
        this.moduloFisico = moduloFisico;
    }

    @Column(name = "contenedor_iconos", nullable = false)

    public boolean isContenedorIconos() {
        return this.contenedorIconos;
    }

    public void setContenedorIconos(boolean contenedorIconos) {
        this.contenedorIconos = contenedorIconos;
    }

    @Column(name = "codebase")
    public String getCodebase() {
        return this.codebase;
    }

    public void setCodebase(String codebase) {
        if (codebase != null)
            codebase = codebase.trim();
        this.codebase = codebase;
    }

    @Column(name = "descripcion")
    public String getDescripcion() {
        return this.descripcion;
    }

    public void setDescripcion(String descripcion) {
        if (descripcion != null)
            descripcion = descripcion.trim();
        this.descripcion = descripcion;
    }

    @Column(name = "grupo")
    public String getGrupo() {
        return this.grupo;
    }

    public void setGrupo(String grupo) {
        if (grupo != null)
            grupo = grupo.trim();
        this.grupo = grupo;
    }

    @Column(name = "necesita_activacion", nullable = false)

    public boolean isNecesitaActivacion() {
        return this.necesitaActivacion;
    }

    public void setNecesitaActivacion(boolean necesitaActivacion) {
        this.necesitaActivacion = necesitaActivacion;
    }

    @Column(name = "activo", nullable = false)

    public boolean isActivo() {
        return this.activo;
    }

    public void setActivo(boolean activo) {
        this.activo = activo;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<OrdenTransferencia_estadisticas> getOrdenTransferencias() {
        return this.ordenTransferencias;
    }

    public void setOrdenTransferencias(
            Set<OrdenTransferencia_estadisticas> ordenTransferencias) {
        this.ordenTransferencias = ordenTransferencias;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<BolsaSangre_estadisticas> getBolsaSangres() {
        return this.bolsaSangres;
    }

    public void setBolsaSangres(Set<BolsaSangre_estadisticas> bolsaSangres) {
        this.bolsaSangres = bolsaSangres;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<SolicitudIntervencion_estadisticas> getSolicitudIntervencions() {
        return this.solicitudIntervencions;
    }

    public void setSolicitudIntervencions(
            Set<SolicitudIntervencion_estadisticas> solicitudIntervencions) {
        this.solicitudIntervencions = solicitudIntervencions;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<CertificadoDefuncion_estadisticas> getCertificadoDefuncions() {
        return this.certificadoDefuncions;
    }

    public void setCertificadoDefuncions(
            Set<CertificadoDefuncion_estadisticas> certificadoDefuncions) {
        this.certificadoDefuncions = certificadoDefuncions;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<SolicitudAnalisisLab_estadisticas> getSolicitudAnalisisLabs() {
        return this.solicitudAnalisisLabs;
    }

    public void setSolicitudAnalisisLabs(
            Set<SolicitudAnalisisLab_estadisticas> solicitudAnalisisLabs) {
        this.solicitudAnalisisLabs = solicitudAnalisisLabs;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<SolicitudTransfusion_estadisticas> getSolicitudTransfusions() {
        return this.solicitudTransfusions;
    }

    public void setSolicitudTransfusions(
            Set<SolicitudTransfusion_estadisticas> solicitudTransfusions) {
        this.solicitudTransfusions = solicitudTransfusions;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<Admision_estadisticas> getAdmisions() {
        return this.admisions;
    }

    public void setAdmisions(Set<Admision_estadisticas> admisions) {
        this.admisions = admisions;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<Transferencia_estadisticas> getTransferencias() {
        return this.transferencias;
    }

    public void setTransferencias(Set<Transferencia_estadisticas> transferencias) {
        this.transferencias = transferencias;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<Laboratorio_estadisticas> getLaboratorios() {
        return this.laboratorios;
    }

    public void setLaboratorios(Set<Laboratorio_estadisticas> laboratorios) {
        this.laboratorios = laboratorios;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidadByIdEntidad")
    public Set<TratamientoTerapeutico_estadisticas> getTratamientoTerapeuticosForIdEntidad() {
        return this.tratamientoTerapeuticosForIdEntidad;
    }

    public void setTratamientoTerapeuticosForIdEntidad(
            Set<TratamientoTerapeutico_estadisticas> tratamientoTerapeuticosForIdEntidad) {
        this.tratamientoTerapeuticosForIdEntidad = tratamientoTerapeuticosForIdEntidad;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<SolicitudInterconsulta_estadisticas> getSolicitudInterconsultas() {
        return this.solicitudInterconsultas;
    }

    public void setSolicitudInterconsultas(
            Set<SolicitudInterconsulta_estadisticas> solicitudInterconsultas) {
        this.solicitudInterconsultas = solicitudInterconsultas;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidad")
    public Set<InfecFicha_estadisticas> getInfecFichas() {
        return this.infecFichas;
    }

    public void setInfecFichas(Set<InfecFicha_estadisticas> infecFichas) {
        this.infecFichas = infecFichas;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "funcionalidadByIdFuncionalidad")
    public Set<TratamientoTerapeutico_estadisticas> getTratamientoTerapeuticosForIdFuncionalidad() {
        return this.tratamientoTerapeuticosForIdFuncionalidad;
    }

    public void setTratamientoTerapeuticosForIdFuncionalidad(
            Set<TratamientoTerapeutico_estadisticas> tratamientoTerapeuticosForIdFuncionalidad) {
        this.tratamientoTerapeuticosForIdFuncionalidad = tratamientoTerapeuticosForIdFuncionalidad;
    }

}
