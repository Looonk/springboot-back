package cu.uci.cesim.hce_back.estadisticas.model.entity.auto.ris;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

// Generated May 21, 2012 5:42:06 PM by Hibernate Tools 3.4.0.CR1

import org.hibernate.validator.constraints.Length;

import javax.persistence.*;
import java.util.Date;


/**
 * Usuario generated by hbm2java
 */
@Entity
@Table(name = "usuario", schema = "comun", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class Usuario_RIS implements java.io.Serializable {

    private long id;
    private Integer version;
    private Persona_RIS persona;
    private String nombre;
    private String username;
    private String password;
    private Date fechaNacimiento;
    private Boolean eliminado;
    private Long cid;
    private Boolean cuentaHabilitada;
    private String primerApellido;
    private String segundoApellido;
    private String direccionParticular;
    private String cedula;
    private String pasaporte;
    private String telefono;
    private Long idTipoIdentidad;
    private Long idProfile;
    private String idRis;
    private Medico_RIS medico;

    public Usuario_RIS() {
    }

    public Usuario_RIS(long id, String nombre, String username,
                       String password) {
        this.id = id;
        this.nombre = nombre;
        this.username = username;
        this.password = password;
    }

    public Usuario_RIS(long id, Persona_RIS persona,
                       String nombre, String username, String password,
                       Date fechaNacimiento, Boolean eliminado, Long cid,
                       Boolean cuentaHabilitada, String primerApellido,
                       String segundoApellido, String direccionParticular, String cedula,
                       String pasaporte, String telefono, Long idTipoIdentidad,
                       Long idProfile, String idRis, Medico_RIS medico) {
        this.id = id;
        this.persona = persona;
        this.nombre = nombre;
        this.username = username;
        this.password = password;
        this.fechaNacimiento = fechaNacimiento;
        this.eliminado = eliminado;
        this.cid = cid;
        this.cuentaHabilitada = cuentaHabilitada;
        this.primerApellido = primerApellido;
        this.segundoApellido = segundoApellido;
        this.direccionParticular = direccionParticular;
        this.cedula = cedula;
        this.pasaporte = pasaporte;
        this.telefono = telefono;
        this.idTipoIdentidad = idTipoIdentidad;
        this.idProfile = idProfile;
        this.idRis = idRis;
        this.medico = medico;
    }

    @Id
    @Column(name = "id", unique = true, nullable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @Version
    @Column(name = "version")
    public Integer getVersion() {
        return this.version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_persona")
    public Persona_RIS getPersona() {
        return this.persona;
    }

    public void setPersona(Persona_RIS persona) {
        this.persona = persona;
    }

    @Column(name = "nombre", nullable = false, length = 150)

    @Length(max = 150)
    public String getNombre() {
        return this.nombre;
    }

    public void setNombre(String nombre) {
        if (nombre != null)
            nombre = nombre.trim();
        this.nombre = nombre;
    }

    @Column(name = "username", unique = true, nullable = false, length = 150)

    @Length(max = 150)
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        if (username != null)
            username = username.trim();
        this.username = username;
    }

    @Column(name = "password", nullable = false, length = 150)

    @Length(max = 150)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        if (password != null)
            password = password.trim();
        this.password = password;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "fecha_nacimiento", length = 13)
    public Date getFechaNacimiento() {
        return this.fechaNacimiento;
    }

    public void setFechaNacimiento(Date fechaNacimiento) {
        this.fechaNacimiento = fechaNacimiento;
    }

    @Column(name = "eliminado")
    public Boolean getEliminado() {
        return this.eliminado;
    }

    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }

    @Column(name = "cid")
    public Long getCid() {
        return this.cid;
    }

    public void setCid(Long cid) {
        this.cid = cid;
    }

    @Column(name = "cuenta_habilitada")
    public Boolean getCuentaHabilitada() {
        return this.cuentaHabilitada;
    }

    public void setCuentaHabilitada(Boolean cuentaHabilitada) {
        this.cuentaHabilitada = cuentaHabilitada;
    }

    @Column(name = "primer_apellido")
    public String getPrimerApellido() {
        return this.primerApellido;
    }

    public void setPrimerApellido(String primerApellido) {
        if (primerApellido != null)
            primerApellido = primerApellido.trim();
        this.primerApellido = primerApellido;
    }

    @Column(name = "segundo_apellido")
    public String getSegundoApellido() {
        return this.segundoApellido;
    }

    public void setSegundoApellido(String segundoApellido) {
        if (segundoApellido != null)
            segundoApellido = segundoApellido.trim();
        this.segundoApellido = segundoApellido;
    }

    @Column(name = "direccion_particular")
    public String getDireccionParticular() {
        return this.direccionParticular;
    }

    public void setDireccionParticular(String direccionParticular) {
        if (direccionParticular != null)
            direccionParticular = direccionParticular.trim();
        this.direccionParticular = direccionParticular;
    }

    @Column(name = "cedula")
    public String getCedula() {
        return this.cedula;
    }

    public void setCedula(String cedula) {
        if (cedula != null)
            cedula = cedula.trim();
        this.cedula = cedula;
    }

    @Column(name = "pasaporte")
    public String getPasaporte() {
        return this.pasaporte;
    }

    public void setPasaporte(String pasaporte) {
        if (pasaporte != null)
            pasaporte = pasaporte.trim();
        this.pasaporte = pasaporte;
    }

    @Column(name = "telefono")
    public String getTelefono() {
        return this.telefono;
    }

    public void setTelefono(String telefono) {
        if (telefono != null)
            telefono = telefono.trim();
        this.telefono = telefono;
    }

    @Column(name = "id_tipo_identidad")
    public Long getIdTipoIdentidad() {
        return this.idTipoIdentidad;
    }

    public void setIdTipoIdentidad(Long idTipoIdentidad) {
        this.idTipoIdentidad = idTipoIdentidad;
    }

    @Column(name = "id_profile")
    public Long getIdProfile() {
        return this.idProfile;
    }

    public void setIdProfile(Long idProfile) {
        this.idProfile = idProfile;
    }

    @Column(name = "id_ris", length = 36)
    @Length(max = 36)
    public String getIdRis() {
        return this.idRis;
    }

    public void setIdRis(String idRis) {
        if (idRis != null)
            idRis = idRis.trim();
        this.idRis = idRis;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "usuario")
    public Medico_RIS getMedico() {
        return this.medico;
    }

    public void setMedico(Medico_RIS medico) {
        this.medico = medico;
    }

}
