package cu.uci.cesim.hce_back.estadisticas.model.entity.auto;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

// Generated Apr 18, 2012 10:46:48 AM by Hibernate Tools 3.4.0.CR1


/**
 * SolicitudInterconsulta generated by hbm2java
 */
@Entity
@Table(name = "solicitud_interconsulta", schema = "publico")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class SolicitudInterconsulta_estadisticas implements
        java.io.Serializable {

    private long id;
    private Integer version;
    private Funcionalidad_estadisticas funcionalidad;
    private ServicioInEntidad_estadisticas servicioInEntidadByIdSerivicioSolicitado;
    private ServicioInEntidad_estadisticas servicioInEntidadByIdServicioSolicitante;
    private Entidad_estadisticas entidad;
    private DiagnosticoMedico_estadisticas diagnosticoMedico;
    private Medico_estadisticas medico;
    private EspecialidadInEntidad_estadisticas especialidadInEntidad;
    private HojaFrontal_estadisticas hojaFrontal;
    private String motivoInterconsulta;
    private String resumenCaso;
    private Date fecha;
    private Date hora;
    private String ubicacionPaciente;
    private Boolean eliminado;
    private Long cid;
    private Boolean aceptada;
    private Boolean emergencia;
    private Boolean epidemiologia;
    private Boolean anestesiologo;
    private Set<Cita_estadisticas> citas = new HashSet<Cita_estadisticas>(0);

    public SolicitudInterconsulta_estadisticas() {
    }

    public SolicitudInterconsulta_estadisticas(
            long id,
            Funcionalidad_estadisticas funcionalidad,
            ServicioInEntidad_estadisticas servicioInEntidadByIdServicioSolicitante,
            Medico_estadisticas medico, HojaFrontal_estadisticas hojaFrontal,
            String motivoInterconsulta, Date fecha, Date hora) {
        this.id = id;
        this.funcionalidad = funcionalidad;
        this.servicioInEntidadByIdServicioSolicitante = servicioInEntidadByIdServicioSolicitante;
        this.medico = medico;
        this.hojaFrontal = hojaFrontal;
        this.motivoInterconsulta = motivoInterconsulta;
        this.fecha = fecha;
        this.hora = hora;
    }

    public SolicitudInterconsulta_estadisticas(
            long id,
            Funcionalidad_estadisticas funcionalidad,
            ServicioInEntidad_estadisticas servicioInEntidadByIdSerivicioSolicitado,
            ServicioInEntidad_estadisticas servicioInEntidadByIdServicioSolicitante,
            Entidad_estadisticas entidad,
            DiagnosticoMedico_estadisticas diagnosticoMedico,
            Medico_estadisticas medico,
            EspecialidadInEntidad_estadisticas especialidadInEntidad,
            HojaFrontal_estadisticas hojaFrontal, String motivoInterconsulta,
            String resumenCaso, Date fecha, Date hora,
            String ubicacionPaciente, Boolean eliminado, Long cid,
            Boolean aceptada, Boolean emergencia, Boolean epidemiologia,
            Boolean anestesiologo, Set<Cita_estadisticas> citas) {
        this.id = id;
        this.funcionalidad = funcionalidad;
        this.servicioInEntidadByIdSerivicioSolicitado = servicioInEntidadByIdSerivicioSolicitado;
        this.servicioInEntidadByIdServicioSolicitante = servicioInEntidadByIdServicioSolicitante;
        this.entidad = entidad;
        this.diagnosticoMedico = diagnosticoMedico;
        this.medico = medico;
        this.especialidadInEntidad = especialidadInEntidad;
        this.hojaFrontal = hojaFrontal;
        this.motivoInterconsulta = motivoInterconsulta;
        this.resumenCaso = resumenCaso;
        this.fecha = fecha;
        this.hora = hora;
        this.ubicacionPaciente = ubicacionPaciente;
        this.eliminado = eliminado;
        this.cid = cid;
        this.aceptada = aceptada;
        this.emergencia = emergencia;
        this.epidemiologia = epidemiologia;
        this.anestesiologo = anestesiologo;
        this.citas = citas;
    }

    @Id
    @Column(name = "id", unique = true, nullable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @Version
    @Column(name = "version")
    public Integer getVersion() {
        return this.version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_entidad", nullable = false)

    public Funcionalidad_estadisticas getFuncionalidad() {
        return this.funcionalidad;
    }

    public void setFuncionalidad(Funcionalidad_estadisticas funcionalidad) {
        this.funcionalidad = funcionalidad;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_serivicio_solicitado")
    public ServicioInEntidad_estadisticas getServicioInEntidadByIdSerivicioSolicitado() {
        return this.servicioInEntidadByIdSerivicioSolicitado;
    }

    public void setServicioInEntidadByIdSerivicioSolicitado(
            ServicioInEntidad_estadisticas servicioInEntidadByIdSerivicioSolicitado) {
        this.servicioInEntidadByIdSerivicioSolicitado = servicioInEntidadByIdSerivicioSolicitado;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_servicio_solicitante", nullable = false)

    public ServicioInEntidad_estadisticas getServicioInEntidadByIdServicioSolicitante() {
        return this.servicioInEntidadByIdServicioSolicitante;
    }

    public void setServicioInEntidadByIdServicioSolicitante(
            ServicioInEntidad_estadisticas servicioInEntidadByIdServicioSolicitante) {
        this.servicioInEntidadByIdServicioSolicitante = servicioInEntidadByIdServicioSolicitante;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_entidad_solicitada")
    public Entidad_estadisticas getEntidad() {
        return this.entidad;
    }

    public void setEntidad(Entidad_estadisticas entidad) {
        this.entidad = entidad;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_diagnostico_envio")
    public DiagnosticoMedico_estadisticas getDiagnosticoMedico() {
        return this.diagnosticoMedico;
    }

    public void setDiagnosticoMedico(
            DiagnosticoMedico_estadisticas diagnosticoMedico) {
        this.diagnosticoMedico = diagnosticoMedico;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_medico", nullable = false)

    public Medico_estadisticas getMedico() {
        return this.medico;
    }

    public void setMedico(Medico_estadisticas medico) {
        this.medico = medico;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_especialidad_solicitada")
    public EspecialidadInEntidad_estadisticas getEspecialidadInEntidad() {
        return this.especialidadInEntidad;
    }

    public void setEspecialidadInEntidad(
            EspecialidadInEntidad_estadisticas especialidadInEntidad) {
        this.especialidadInEntidad = especialidadInEntidad;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_hoja_frontal", nullable = false)

    public HojaFrontal_estadisticas getHojaFrontal() {
        return this.hojaFrontal;
    }

    public void setHojaFrontal(HojaFrontal_estadisticas hojaFrontal) {
        this.hojaFrontal = hojaFrontal;
    }

    @Column(name = "motivo_interconsulta", nullable = false)

    public String getMotivoInterconsulta() {
        return this.motivoInterconsulta;
    }

    public void setMotivoInterconsulta(String motivoInterconsulta) {
        if (motivoInterconsulta != null)
            motivoInterconsulta = motivoInterconsulta.trim();
        this.motivoInterconsulta = motivoInterconsulta;
    }

    @Column(name = "resumen_caso")
    public String getResumenCaso() {
        return this.resumenCaso;
    }

    public void setResumenCaso(String resumenCaso) {
        if (resumenCaso != null)
            resumenCaso = resumenCaso.trim();
        this.resumenCaso = resumenCaso;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "fecha", nullable = false, length = 13)

    public Date getFecha() {
        return this.fecha;
    }

    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }

    @Temporal(TemporalType.TIME)
    @Column(name = "hora", nullable = false, length = 8)

    public Date getHora() {
        return this.hora;
    }

    public void setHora(Date hora) {
        this.hora = hora;
    }

    @Column(name = "ubicacion_paciente")
    public String getUbicacionPaciente() {
        return this.ubicacionPaciente;
    }

    public void setUbicacionPaciente(String ubicacionPaciente) {
        if (ubicacionPaciente != null)
            ubicacionPaciente = ubicacionPaciente.trim();
        this.ubicacionPaciente = ubicacionPaciente;
    }

    @Column(name = "eliminado")
    public Boolean getEliminado() {
        return this.eliminado;
    }

    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }

    @Column(name = "cid")
    public Long getCid() {
        return this.cid;
    }

    public void setCid(Long cid) {
        this.cid = cid;
    }

    @Column(name = "aceptada")
    public Boolean getAceptada() {
        return this.aceptada;
    }

    public void setAceptada(Boolean aceptada) {
        this.aceptada = aceptada;
    }

    @Column(name = "emergencia")
    public Boolean getEmergencia() {
        return this.emergencia;
    }

    public void setEmergencia(Boolean emergencia) {
        this.emergencia = emergencia;
    }

    @Column(name = "epidemiologia")
    public Boolean getEpidemiologia() {
        return this.epidemiologia;
    }

    public void setEpidemiologia(Boolean epidemiologia) {
        this.epidemiologia = epidemiologia;
    }

    @Column(name = "anestesiologo")
    public Boolean getAnestesiologo() {
        return this.anestesiologo;
    }

    public void setAnestesiologo(Boolean anestesiologo) {
        this.anestesiologo = anestesiologo;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "cita_in_sol_interconsulta", schema = "citas", joinColumns = {@JoinColumn(name = "id_solicitud", nullable = false, updatable = false)}, inverseJoinColumns = {@JoinColumn(name = "id_cita", nullable = false, updatable = false)})
    public Set<Cita_estadisticas> getCitas() {
        return this.citas;
    }

    public void setCitas(Set<Cita_estadisticas> citas) {
        this.citas = citas;
    }

}
